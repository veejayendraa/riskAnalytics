/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.vij.riskAnalytics.simulations.trades.hdfs;

import org.apache.ignite.cache.query.annotations.QuerySqlField;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TradeSimulation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6210816299434095985L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradeSimulation\",\"namespace\":\"com.vij.riskAnalytics.simulations.trades.hdfs\",\"fields\":[{\"name\":\"dealId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"simulationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"underlyer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"simulatedPnLAmt\",\"type\":\"double\"},{\"name\":\"position\",\"type\":\"double\"},{\"name\":\"portfolio\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"businessDate\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @QuerySqlField
  @Deprecated public java.lang.String dealId;
  @QuerySqlField
  @Deprecated public java.lang.String simulationId;
  @QuerySqlField
  @Deprecated public java.lang.String underlyer;
  @QuerySqlField
  @Deprecated public double simulatedPnLAmt;
  @QuerySqlField
  @Deprecated public double position;
  @QuerySqlField (name="book")
  @Deprecated public java.lang.String portfolio;
  @QuerySqlField
  @Deprecated public int businessDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TradeSimulation() {}

  /**
   * All-args constructor.
   */
  public TradeSimulation(java.lang.String dealId, java.lang.String simulationId, java.lang.String underlyer, double simulatedPnLAmt, double position, java.lang.String portfolio, int businessDate) {
    this.dealId = dealId;
    this.simulationId = simulationId;
    this.underlyer = underlyer;
    this.simulatedPnLAmt = simulatedPnLAmt;
    this.position = position;
    this.portfolio = portfolio;
    this.businessDate = businessDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dealId;
    case 1: return simulationId;
    case 2: return underlyer;
    case 3: return simulatedPnLAmt;
    case 4: return position;
    case 5: return portfolio;
    case 6: return businessDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dealId = (java.lang.String)value$; break;
    case 1: simulationId = (java.lang.String)value$; break;
    case 2: underlyer = (java.lang.String)value$; break;
    case 3: simulatedPnLAmt = (java.lang.Double)value$; break;
    case 4: position = (java.lang.Double)value$; break;
    case 5: portfolio = (java.lang.String)value$; break;
    case 6: businessDate = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dealId' field.
   */
  public java.lang.String getDealId() {
    return dealId;
  }

  /**
   * Sets the value of the 'dealId' field.
   * @param value the value to set.
   */
  public void setDealId(java.lang.String value) {
    this.dealId = value;
  }

  /**
   * Gets the value of the 'simulationId' field.
   */
  public java.lang.String getSimulationId() {
    return simulationId;
  }

  /**
   * Sets the value of the 'simulationId' field.
   * @param value the value to set.
   */
  public void setSimulationId(java.lang.String value) {
    this.simulationId = value;
  }

  /**
   * Gets the value of the 'underlyer' field.
   */
  public java.lang.String getUnderlyer() {
    return underlyer;
  }

  /**
   * Sets the value of the 'underlyer' field.
   * @param value the value to set.
   */
  public void setUnderlyer(java.lang.String value) {
    this.underlyer = value;
  }

  /**
   * Gets the value of the 'simulatedPnLAmt' field.
   */
  public java.lang.Double getSimulatedPnLAmt() {
    return simulatedPnLAmt;
  }

  /**
   * Sets the value of the 'simulatedPnLAmt' field.
   * @param value the value to set.
   */
  public void setSimulatedPnLAmt(java.lang.Double value) {
    this.simulatedPnLAmt = value;
  }

  /**
   * Gets the value of the 'position' field.
   */
  public java.lang.Double getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.Double value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'portfolio' field.
   */
  public java.lang.String getPortfolio() {
    return portfolio;
  }

  /**
   * Sets the value of the 'portfolio' field.
   * @param value the value to set.
   */
  public void setPortfolio(java.lang.String value) {
    this.portfolio = value;
  }

  /**
   * Gets the value of the 'businessDate' field.
   */
  public java.lang.Integer getBusinessDate() {
    return businessDate;
  }

  /**
   * Sets the value of the 'businessDate' field.
   * @param value the value to set.
   */
  public void setBusinessDate(java.lang.Integer value) {
    this.businessDate = value;
  }

  /**
   * Creates a new TradeSimulation RecordBuilder.
   * @return A new TradeSimulation RecordBuilder
   */
  public static com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder newBuilder() {
    return new com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder();
  }
  
  /**
   * Creates a new TradeSimulation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TradeSimulation RecordBuilder
   */
  public static com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder newBuilder(com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder other) {
    return new com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder(other);
  }
  
  /**
   * Creates a new TradeSimulation RecordBuilder by copying an existing TradeSimulation instance.
   * @param other The existing instance to copy.
   * @return A new TradeSimulation RecordBuilder
   */
  public static com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder newBuilder(com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation other) {
    return new com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder(other);
  }
  
  /**
   * RecordBuilder for TradeSimulation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradeSimulation>
    implements org.apache.avro.data.RecordBuilder<TradeSimulation> {

    private java.lang.String dealId;
    private java.lang.String simulationId;
    private java.lang.String underlyer;
    private double simulatedPnLAmt;
    private double position;
    private java.lang.String portfolio;
    private int businessDate;

    /** Creates a new Builder */
    private Builder() {
      super(com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dealId)) {
        this.dealId = data().deepCopy(fields()[0].schema(), other.dealId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.simulationId)) {
        this.simulationId = data().deepCopy(fields()[1].schema(), other.simulationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.underlyer)) {
        this.underlyer = data().deepCopy(fields()[2].schema(), other.underlyer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.simulatedPnLAmt)) {
        this.simulatedPnLAmt = data().deepCopy(fields()[3].schema(), other.simulatedPnLAmt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.position)) {
        this.position = data().deepCopy(fields()[4].schema(), other.position);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.portfolio)) {
        this.portfolio = data().deepCopy(fields()[5].schema(), other.portfolio);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.businessDate)) {
        this.businessDate = data().deepCopy(fields()[6].schema(), other.businessDate);
        fieldSetFlags()[6] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing TradeSimulation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation other) {
            super(com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.SCHEMA$);
      if (isValidValue(fields()[0], other.dealId)) {
        this.dealId = data().deepCopy(fields()[0].schema(), other.dealId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.simulationId)) {
        this.simulationId = data().deepCopy(fields()[1].schema(), other.simulationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.underlyer)) {
        this.underlyer = data().deepCopy(fields()[2].schema(), other.underlyer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.simulatedPnLAmt)) {
        this.simulatedPnLAmt = data().deepCopy(fields()[3].schema(), other.simulatedPnLAmt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.position)) {
        this.position = data().deepCopy(fields()[4].schema(), other.position);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.portfolio)) {
        this.portfolio = data().deepCopy(fields()[5].schema(), other.portfolio);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.businessDate)) {
        this.businessDate = data().deepCopy(fields()[6].schema(), other.businessDate);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'dealId' field.
      * @return The value.
      */
    public java.lang.String getDealId() {
      return dealId;
    }

    /**
      * Sets the value of the 'dealId' field.
      * @param value The value of 'dealId'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setDealId(java.lang.String value) {
      validate(fields()[0], value);
      this.dealId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'dealId' field has been set.
      * @return True if the 'dealId' field has been set, false otherwise.
      */
    public boolean hasDealId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dealId' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearDealId() {
      dealId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'simulationId' field.
      * @return The value.
      */
    public java.lang.String getSimulationId() {
      return simulationId;
    }

    /**
      * Sets the value of the 'simulationId' field.
      * @param value The value of 'simulationId'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setSimulationId(java.lang.String value) {
      validate(fields()[1], value);
      this.simulationId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'simulationId' field has been set.
      * @return True if the 'simulationId' field has been set, false otherwise.
      */
    public boolean hasSimulationId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'simulationId' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearSimulationId() {
      simulationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'underlyer' field.
      * @return The value.
      */
    public java.lang.String getUnderlyer() {
      return underlyer;
    }

    /**
      * Sets the value of the 'underlyer' field.
      * @param value The value of 'underlyer'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setUnderlyer(java.lang.String value) {
      validate(fields()[2], value);
      this.underlyer = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'underlyer' field has been set.
      * @return True if the 'underlyer' field has been set, false otherwise.
      */
    public boolean hasUnderlyer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'underlyer' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearUnderlyer() {
      underlyer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'simulatedPnLAmt' field.
      * @return The value.
      */
    public java.lang.Double getSimulatedPnLAmt() {
      return simulatedPnLAmt;
    }

    /**
      * Sets the value of the 'simulatedPnLAmt' field.
      * @param value The value of 'simulatedPnLAmt'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setSimulatedPnLAmt(double value) {
      validate(fields()[3], value);
      this.simulatedPnLAmt = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'simulatedPnLAmt' field has been set.
      * @return True if the 'simulatedPnLAmt' field has been set, false otherwise.
      */
    public boolean hasSimulatedPnLAmt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'simulatedPnLAmt' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearSimulatedPnLAmt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public java.lang.Double getPosition() {
      return position;
    }

    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setPosition(double value) {
      validate(fields()[4], value);
      this.position = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearPosition() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'portfolio' field.
      * @return The value.
      */
    public java.lang.String getPortfolio() {
      return portfolio;
    }

    /**
      * Sets the value of the 'portfolio' field.
      * @param value The value of 'portfolio'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setPortfolio(java.lang.String value) {
      validate(fields()[5], value);
      this.portfolio = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'portfolio' field has been set.
      * @return True if the 'portfolio' field has been set, false otherwise.
      */
    public boolean hasPortfolio() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'portfolio' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearPortfolio() {
      portfolio = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'businessDate' field.
      * @return The value.
      */
    public java.lang.Integer getBusinessDate() {
      return businessDate;
    }

    /**
      * Sets the value of the 'businessDate' field.
      * @param value The value of 'businessDate'.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder setBusinessDate(int value) {
      validate(fields()[6], value);
      this.businessDate = value;
      fieldSetFlags()[6] = true;
      return this; 
    }

    /**
      * Checks whether the 'businessDate' field has been set.
      * @return True if the 'businessDate' field has been set, false otherwise.
      */
    public boolean hasBusinessDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'businessDate' field.
      * @return This builder.
      */
    public com.vij.riskAnalytics.simulations.trades.hdfs.TradeSimulation.Builder clearBusinessDate() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public TradeSimulation build() {
      try {
        TradeSimulation record = new TradeSimulation();
        record.dealId = fieldSetFlags()[0] ? this.dealId : (java.lang.String) defaultValue(fields()[0]);
        record.simulationId = fieldSetFlags()[1] ? this.simulationId : (java.lang.String) defaultValue(fields()[1]);
        record.underlyer = fieldSetFlags()[2] ? this.underlyer : (java.lang.String) defaultValue(fields()[2]);
        record.simulatedPnLAmt = fieldSetFlags()[3] ? this.simulatedPnLAmt : (java.lang.Double) defaultValue(fields()[3]);
        record.position = fieldSetFlags()[4] ? this.position : (java.lang.Double) defaultValue(fields()[4]);
        record.portfolio = fieldSetFlags()[5] ? this.portfolio : (java.lang.String) defaultValue(fields()[5]);
        record.businessDate = fieldSetFlags()[6] ? this.businessDate : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  



  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

 

}
